#ifndef IDBUS_MSG_H
#define IDBUS_MSG_H

/*
 * Very common IDBUS messages
 */
#include "idbus.h"

/*
 * Define which types of IDBUS messages you would like to initiate
 * Please checkout the cMakeLists.txt file
 */
// #define APPLE_USB
// #define UNCERT_OTG
// #define UNCERT_USB
// #define APPLE_HAYWIRE
// #define APPLE_AUDIO

/*
 * Helper macro to define the well known IDBUS messages in a canonical way
 * parameters:
 *  - header value
 *  - crc
 *  - data length
 *  - data values
 *
 * For example:
 *  IDBUS_MSG(74, 0x1f, 2, 0x00, 0x02)
 * describes the following idbus message
 * {header | data       | crc }
 * {0x74,    0x00, 0x02 , 0x1f}
 */
#define IDBUS_MSG(_id, _crc, _size, ...)              \
    static uint8_t msg_##_id##_buf[] = {__VA_ARGS__}; \
    static idbus_msg_t msg_##_id = {               \
        .header = 0x##_id,                            \
        .data_ptr = (uint8_t *)&msg_##_id##_buf,      \
        .data_len = _size,                            \
        .crc = _crc};

#if defined(APPLE_USB)

/*
 * ############################################################################
 *
 * Apple USB - Lightning cable
 *
 * ############################################################################
 */
// 0x74 request + 0x75 response
// provides information, which lightning accessory got connected
// this implies which protocols get exposed on which pins
// please find various 0x75 messages here: https://nyansatan.github.io/lightning/
// accctl: Digitial ID: 10 0c 00 00 00 00
IDBUS_MSG(74, 0x1f, 2, 0x00, 0x02);
IDBUS_MSG(75, 0x66, 6, 0x10, 0x0C, 0x00, 0x00, 0x00, 0x00);
// IDBUS_MSG(75, 0x3d, 6, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00);

// 0x70 request + 0x71 response
// seems to be charging related #TODO: verify this
IDBUS_MSG(70, 0x3D, 2, 0x00, 0x00);
IDBUS_MSG(71, 0x93, 0);

// 0x75 request + 0x76 response
// accctl: Interface device info: vid=2 pid=1 rev=2 flags=0x80
//         Interface device serial number: 0x600126ddaa6f
// maybe based on USB specs:
// vid = vendor id
// pid = product id
// rev = revision
// flags = ???
IDBUS_MSG(76, 0x10, 0);
IDBUS_MSG(77, 0xFA, 10, 0x02, 0x01, 0x02, 0x80, 0x60, 0x01, 0x26, 0xDD, 0xAA, 0x6F);

// 0x78 request + 0x79 response
// accctl: Interface module serial number: DYG7285UP9VFJYHAY
IDBUS_MSG(78, 0x0f, 0);
IDBUS_MSG(79, 0x53, 20, 0x44, 0x59, 0x47, 0x37, 0x32, 0x38, 0x35, 0x55, 0x50, 0x39, 0x56, 0x46, 0x4A, 0x59, 0x48, 0x41, 0x59, 0x00, 0x65, 0x88);

// 0x7A request + 0x7B response
// cable serial number (IOAccessoryManager) ->  proven via iPhone logs
// accctl: Accessory serial number: FC973152926G0NHAS
IDBUS_MSG(7A, 0xB3, 0);
IDBUS_MSG(7B, 0x52, 20, 0x46, 0x43, 0x39, 0x37, 0x33, 0x31, 0x35, 0x32, 0x39, 0x32, 0x36, 0x47, 0x30, 0x4E, 0x48, 0x41, 0x53, 0x00, 0x3E, 0x18);

// 0x72 request + 0x73 response
IDBUS_MSG(72, 0x71, 0);
IDBUS_MSG(73, 0x5E, 4, 0x00, 0x00, 0xC0, 0x00);

// 0x84 request + has no response
// some kind of summary about the handshake
IDBUS_MSG(84, 0x7A, 8, 0x00, 0x00, 0x05, 0x4E, 0x47, 0x34, 0x38, 0x32);

#elif defined(UNCERT_OTG)

/*
 * ############################################################################
 *
 * Uncertified USB OTG adapter
 *
 * ############################################################################
 */
// 0x74 request + 0x75 response
IDBUS_MSG(74, 0x1f, 2, 0x00, 0x02);
IDBUS_MSG(75, 0xD6, 6, 0x11, 0xF0, 0x00, 0x00, 0x00, 0x00);

// 0x70 request + 0x71 response
// iPhone6
IDBUS_MSG(70, 0x3D, 2, 0x00, 0x00);
// iPhone7
// IDBUS_MSG(70, 0x12, 2, 0x80, 0x00);
IDBUS_MSG(71, 0x93, 0);

// 0x75 request + 0x76 response
IDBUS_MSG(76, 0x10, 0);
IDBUS_MSG(77, 0x2E, 10, 0x01, 0x25, 0x01, 0x80, 0xA0, 0x6A, 0x8D, 0x25, 0x26, 0x66);

// 0x78 request + 0x79 response
IDBUS_MSG(78, 0x0f, 0);
IDBUS_MSG(79, 0x5B, 20, 0x44, 0x57, 0x48, 0x32, 0x33, 0x38, 0x37, 0x31, 0x45, 0x30, 0x37, 0x46, 0x35, 0x4C, 0x34, 0x41, 0x43, 0x00, 0xAB, 0x88);

// 0x7A request + 0x7B response
IDBUS_MSG(7A, 0xB3, 0);
IDBUS_MSG(7B, 0x27, 20, 0x43, 0x30, 0x38, 0x32, 0x34, 0x32, 0x36, 0x30, 0x31, 0x31, 0x35, 0x44, 0x59, 0x37, 0x51, 0x41, 0x37, 0x00, 0x30, 0x00);

// 0x72 request + 0x87 response -> HERE
IDBUS_MSG(72, 0x71, 0);
IDBUS_MSG(73, 0x5E, 4, 0x00, 0x00, 0xC0, 0x00);

// 0x84 request + has no response
IDBUS_MSG(84, 0x60, 18, 0x00, 0x00, 0x05, 0x4D, 0x4E, 0x39, 0x4C, 0x32, 0x3A, 0x84, 0x01, 0x00, 0x05, 0x31, 0x39, 0x48, 0x31, 0x32);

#endif
#endif