#ifndef UART_MSG_H
#define UART_MSG_H

#include "stdint.h"

/*
 * iAP message checksum from http://www.ipodlinux.org/Apple_Accessory_Protocol/
 * checksum = 0x100 - ( (sum of all length/transid/mode/command/parameter bytes) & 0xFF)
 */

/*
 * Very common UART messages
 * This file contains currently only the
 * UART messages, exchanged via DP1/DN1 after connecting an USB OTG adapter
 */
typedef struct
{
    uint8_t wait;
    uint8_t size;
    uint8_t *data;
} uart_msg_t;

// iAP message struct
// it consists of a two byte header value, which is 0xFF,0x55
// I guess they use two bytes, because 0xFF is part of the data range, but this implies that 0xFF, 0x55 is not allowed within the data
// next the message includes the length of the raw data section. The total package length is the length + 4, where the four byte are the
// header + length byte + checksum
// there is some checksum, but I have not figured out yet how it's computed it

struct iap_msg_t
{
    uint8_t header[2];
    uint8_t len;
    uint8_t checksum;
    uint8_t *data;
};

// Handshake: iAP1 https://raw.githubusercontent.com/geniass/pipod/master/MFi%20Accessory%20Firmware%20Specification%20R46_NoRestriction.pdf

// second, we need to perform the authentication
// pho -> acc:

// #### Type A (phone/pho) #####

// #### start some IDPS handshake

// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a1_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x03, 0xE9, 0x00, 0x38, 0xD4};
uart_msg_t a1 = {1, 10, a1_data};

// RetFIDTokenValueACKs
uint8_t a2_data[] = {0xFF, 0x55, 0x26, 0x00, 0x3A, 0x00, 0x01, 0x07, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x02, 0x00, 0x04, 0x04, 0x00, 0x02, 0x00, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x04, 0x00, 0x02, 0x00, 0x07, 0x5C};
uart_msg_t a2 = {1, 42, a2_data};

// IDPSStatus
uint8_t a3_data[] = {0xFF, 0x55, 0x05, 0x00, 0x3C, 0x03, 0xEB, 0x00, 0xD1};
uart_msg_t a3 = {1, 9, a3_data};
// #### finished some IDPS handshake

// #### start device/accessory authentication process
// GetAccessoryAuthenticationInfo -> request certificate from accessory
uint8_t a4_data[] = {0xFF, 0x55, 0x04, 0x00, 0x14, 0x00, 0x01, 0xE7};
uart_msg_t a4 = {0, 8, a4_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a5_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a5 = {1, 10, a5_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a6_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a6 = {1, 10, a6_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a7_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a7 = {1, 10, a7_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a8_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a8 = {1, 10, a8_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a9_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a9 = {1, 10, a9_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a10_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a10 = {1, 10, a10_data};
// command acknowledge: Command 0x02: General Lingo ACK
uint8_t a11_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x00, 0x02, 0x00, 0x15, 0xE1};
uart_msg_t a11 = {1, 10, a11_data};

// AckAccessoryAuthenticationInfo -> acknowledge receipt of certificate data
uint8_t a12_data[] = {0xFF, 0x55, 0x05, 0x00, 0x16, 0x00, 0x02, 0x00, 0xE3};
uart_msg_t a12 = {1, 47, a12_data};
// GetAccessoryAuthenticationSignature -> challenge accessory with 20 bytes challenge
// challenge: 0xBA, 0xC7, 0x4F, 0xF9, 0xAE, 0x40, 0xD1, 0x11, 0x3E, 0x09, 0x18, 0xFF, 0xA8, 0x8D, 0x82, 0x18, 0xA0, 0x64, 0xF3, 0x21 (starting after transaction counter 0x00, 0x02, 20 bytes long)
// retry counter: 0x01 (second last byte)
uint8_t a13_data[] = {0xFF, 0x55, 0x19, 0x00, 0x17, 0x00, 0x02, 0xBA, 0xC7, 0x4F, 0xF9, 0xAE, 0x40, 0xD1, 0x11, 0x3E, 0x09, 0x18, 0xFF, 0xA8, 0x8D, 0x82, 0x18, 0xA0, 0x64, 0xF3, 0x21, 0x01, 0xEF};
uart_msg_t a13 = {0, 29, a13_data};

// AckAccessoryAuthenticationStatus -> 0x00 = passed authentication
uint8_t a14_data[] = {0xFF, 0x55, 0x05, 0x00, 0x19, 0x00, 0x03, 0x00, 0xDF};
uart_msg_t a14 = {1, 9, a14_data};
// #### finished device/accessory authentication process

// #### start requesting USB-OTG/device mode
// iPodAck -> ack from phone that the usb mode should be changed
// transID: 0x03, 0xEC
// status: 0x00 (Success)
// ackCmd: 0x83
uint8_t a15_data[] = {0xFF, 0x55, 0x06, 0x06, 0x80, 0x03, 0xEC, 0x00, 0x83, 0x02};
uart_msg_t a15 = {1, 10, a15_data};
// #### finished requesting USB-OTG/device mode

// iPodAck - ack the last current-sink command (0x54)s
uint8_t a16_data[] = {0xFF, 0x55, 0x06, 0x00, 0x02, 0x03, 0xED, 0x00, 0x54, 0xB4};
uart_msg_t a16 = {1, 10, a16_data};

// NotifyUSBMode -> show that the USB mode is not available and active
uint8_t a17_data[] = {0xFF, 0x55, 0x05, 0x06, 0x04, 0x00, 0x03, 0x02, 0xEC};
uart_msg_t a17 = {0, 9, a17_data};

uart_msg_t *uart_a_msg_data[] = {&a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17};
uint8_t uart_a_msg_data_size = 17;

// #### Type B (accessory/acc) #####

// #### start some IDPS handshake
// StartIDPS
uint8_t b1_data[] = {0xFF, 0x55, 0x04, 0x00, 0x38, 0x03, 0xE9, 0xD8};
uart_msg_t b1 = {0, 8, b1_data};

// SetFIDTokenValues
uint8_t b2_data[] = {0xFF, 0x55, 0x51, 0x00, 0x39, 0x00, 0x01, 0x07, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x02, 0x03, 0x04, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x02, 0x01, 0x43, 0x63, 0x63, 0x2D, 0x63, 0x68, 0x69, 0x70, 0x00, 0x06, 0x00, 0x02, 0x04, 0x01, 0x01, 0x02, 0x06, 0x00, 0x02, 0x05, 0x02, 0x03, 0x01, 0x0B, 0x00, 0x02, 0x06, 0x58, 0x6C, 0x73, 0x54, 0x45, 0x43, 0x48, 0x00, 0x08, 0x00, 0x02, 0x07, 0x43, 0x30, 0x32, 0x00, 0x00, 0x0C};
uart_msg_t b2 = {1, 85, b2_data};

// EndIDPS
uint8_t b3_data[] = {0xFF, 0x55, 0x05, 0x00, 0x3B, 0x03, 0xEB, 0x00, 0xD2};
uart_msg_t b3 = {1, 9, b3_data};
// #### finished some IDPS handshake

// #### start device/accessory authentication process
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b4_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x00, 0x07, 0x30, 0x82, 0x03, 0x88, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x03, 0x79, 0x30, 0x82, 0x03, 0x75, 0x02, 0x01, 0x01, 0x31, 0x00, 0x30, 0x0B, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x03, 0x5D, 0x30, 0x82, 0x03, 0x59, 0x30, 0x82, 0x02, 0x41, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0F, 0x12, 0x12, 0xAA, 0x13, 0x02, 0x07, 0xAA, 0x04, 0xAA, 0x35, 0x19, 0xAA, 0x95, 0x94, 0x84, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x81, 0x83, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0A, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x48};
uart_msg_t b4 = {2, 140, b4_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b5_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x01, 0x07, 0x26, 0x30, 0x24, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x1D, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x2E, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x69, 0x50, 0x6F, 0x64, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6F, 0x72, 0x69, 0x65, 0x73, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x33, 0x30, 0x32, 0x30, 0x38, 0x31, 0x37, 0x35, 0x35, 0x30, 0x38, 0x5A, 0x17, 0x0D, 0x32, 0x31, 0x30, 0x32, 0x30, 0x38, 0x31, 0x37, 0x35, 0x35, 0x30, 0x38, 0x5A, 0xF6};
uart_msg_t b5 = {1, 140, b5_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b6_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x02, 0x07, 0x30, 0x70, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x0A, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x1F, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x16, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x69, 0x50, 0x6F, 0x64, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6F, 0x72, 0x69, 0x65, 0x73, 0x31, 0x2B, 0x30, 0x29, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x22, 0x49, 0x50, 0x41, 0x5F, 0x31, 0x32, 0x31, 0x32, 0x41, 0x41, 0x31, 0x33, 0x30, 0x32, 0x30, 0x37, 0x41, 0x41, 0x30, 0x34, 0x41, 0x41, 0x33, 0x35, 0x31, 0x39, 0x41, 0x41, 0x39, 0x35, 0x39, 0x34, 0x38, 0x34, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x45};
uart_msg_t b6 = {1, 140, b6_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b7_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x03, 0x07, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xA9, 0xE2, 0x61, 0x63, 0xB6, 0x22, 0x02, 0xAD, 0x8A, 0x38, 0x5E, 0x3C, 0x63, 0x98, 0x9E, 0xAD, 0xDC, 0x89, 0xAD, 0xF0, 0x9E, 0xD6, 0xD6, 0x29, 0x95, 0x60, 0x0A, 0x86, 0xBA, 0x51, 0xBD, 0x8F, 0x22, 0x69, 0xF2, 0x68, 0xF1, 0xFA, 0x2D, 0x7A, 0xF5, 0x82, 0x94, 0xBB, 0xAB, 0xFC, 0x1D, 0x55, 0xBF, 0x4A, 0x2D, 0xFF, 0x7C, 0x1F, 0x3A, 0x36, 0x12, 0x51, 0x16, 0xF4, 0x97, 0x9E, 0x8C, 0x9E, 0x4E, 0x66, 0x2E, 0x21, 0xAC, 0xBC, 0x79, 0x9B, 0x83, 0x39, 0xC9, 0x39, 0xA9, 0xD1, 0xE4, 0x17, 0x01, 0x3B, 0x06, 0x09, 0x5A, 0xD0, 0x3F, 0xA0, 0x3C, 0xD7, 0xDA, 0xFF, 0x4E, 0xB3, 0x45, 0xE5, 0x86, 0xA9, 0xC2, 0xE0, 0x4B, 0x77, 0x57, 0x59, 0xE9, 0x52, 0xC6, 0xF8, 0xEE, 0x69, 0xA1, 0xDA, 0x32, 0x77};
uart_msg_t b7 = {1, 140, b7_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b8_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x04, 0x07, 0xDB, 0xB6, 0x73, 0x2C, 0x29, 0xC0, 0xA7, 0xAC, 0x80, 0x25, 0x6E, 0x2E, 0xCC, 0x2F, 0xAD, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x60, 0x30, 0x5E, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x9A, 0x35, 0x8F, 0x3B, 0xAD, 0xAC, 0x33, 0x63, 0x7C, 0xD3, 0xAB, 0x45, 0x0D, 0xB7, 0xE6, 0xC6, 0xD6, 0x12, 0x4A, 0x69, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xFF, 0x4B, 0x1A, 0x43, 0x9A, 0xF5, 0x19, 0x96, 0xAB, 0x18, 0x00, 0x2B, 0x61, 0xC9, 0xEE, 0x40, 0x9D, 0x8E, 0xC7, 0x04, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x03, 0xB8, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x29};
uart_msg_t b8 = {1, 140, b8_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b9_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x05, 0x07, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x7D, 0x39, 0x32, 0x80, 0x9B, 0x4E, 0x26, 0x30, 0x18, 0xEC, 0x31, 0x76, 0x86, 0xC2, 0x74, 0x7D, 0x80, 0x24, 0x66, 0xAF, 0x7A, 0xC3, 0x4A, 0xDC, 0x6C, 0xC5, 0x1A, 0xD7, 0x6D, 0x02, 0x05, 0xBB, 0x3C, 0x03, 0x4A, 0x4A, 0xC6, 0x77, 0xC9, 0x2A, 0x28, 0x8F, 0x58, 0xCD, 0x76, 0xC4, 0xF9, 0x0C, 0x51, 0x56, 0x01, 0x96, 0x16, 0x83, 0x8E, 0xCD, 0xF7, 0x3C, 0xC0, 0x70, 0x4C, 0xCC, 0xC4, 0xC6, 0xB5, 0x77, 0xE8, 0xDD, 0x84, 0x1D, 0x12, 0xDA, 0x03, 0xA0, 0xE5, 0xE2, 0x98, 0xA9, 0x93, 0x4C, 0xBA, 0xCE, 0x24, 0x8C, 0x39, 0x67, 0xE3, 0x34, 0x48, 0x8B, 0xE6, 0x64, 0x43, 0x8F, 0xB9, 0xB6, 0x35, 0xFB, 0xD2, 0xEC, 0x0D, 0x1E, 0xE9, 0x65, 0x7A, 0xCF, 0x6F, 0xE5, 0x4A, 0x55, 0x9E, 0xAB, 0xDD, 0x9D, 0x85, 0xBF, 0x83, 0xD7, 0x1A};
uart_msg_t b9 = {1, 140, b9_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b10_data[] = {0xFF, 0x55, 0x88, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x06, 0x07, 0x39, 0x2A, 0x1B, 0xF2, 0x7D, 0x74, 0x36, 0xAC, 0x42, 0xB2, 0x0A, 0x80, 0x30, 0x84, 0x26, 0xC9, 0x45, 0x1B, 0xA9, 0xFB, 0x7D, 0x21, 0xAD, 0xEE, 0x30, 0x1C, 0xA1, 0xF7, 0x84, 0xD0, 0x26, 0xCB, 0x4E, 0x39, 0x23, 0x53, 0x64, 0x9F, 0xAD, 0x2C, 0x1D, 0x3F, 0x26, 0x88, 0x97, 0x29, 0x5C, 0x48, 0x0F, 0x24, 0x2D, 0xC8, 0xAD, 0x6F, 0xB2, 0x47, 0x1D, 0x55, 0xBE, 0x53, 0xC2, 0x41, 0x99, 0x2B, 0xB6, 0x8E, 0xE8, 0x83, 0x62, 0x27, 0x40, 0xAF, 0x43, 0x1A, 0xC6, 0xE0, 0x32, 0xD5, 0x01, 0xAE, 0xC5, 0x0E, 0x1B, 0x4E, 0x2D, 0xD5, 0x2F, 0x96, 0xCD, 0x1E, 0x0A, 0xD4, 0xF2, 0xF7, 0x29, 0x1E, 0xF8, 0xD5, 0xE1, 0x87, 0x23, 0x60, 0x7B, 0x6B, 0xE6, 0x5C, 0x50, 0xF4, 0x9E, 0xF1, 0xD3, 0xA1, 0x07, 0x51, 0x22, 0xF0, 0x76, 0x09, 0xF1, 0xCF, 0xA7, 0xB4, 0x01, 0xB1, 0xF3, 0x04, 0xBF, 0x99, 0xB2};
uart_msg_t b10 = {1, 140, b10_data};
// RetAccessoryAuthenticationInfo Authentication 2.0 -> send certificate to iphone
uint8_t b11_data[] = {0xFF, 0x55, 0x14, 0x00, 0x15, 0x00, 0x02, 0x02, 0x00, 0x07, 0x07, 0x9E, 0x0F, 0xC9, 0xE3, 0xCC, 0xC0, 0xEA, 0xE1, 0xB9, 0x83, 0x31, 0x00, 0xA8};
uart_msg_t b11 = {1, 140, b11_data}; // 24

// RetAccessoryAuthenticationSignature -> send signature of prior received challenge
// signature is either: 0x7B, 0xC3, 0xBB, 0xEA, 0xD1, 0x20, 0x01, 0xA6, 0x9F, 0x79, 0x36, 0x3E, 0x22, 0xDB, 0xEE, 0x33, 0xA1, 0xCC, 0x5D, 0x88, 0xF5, 0x3F, 0xDC, 0xD1, 0xF4, 0x23, 0xE6, 0x0B, 0x16, 0x2C, 0xD1, 0x6F, 0x36, 0xDD, 0xFE, 0x04, 0xC0, 0x39, 0xC7, 0xBB, 0xE9, 0x6A, 0x55, 0x7D, 0x66, 0x56, 0xE7, 0x9B, 0x6C, 0x2D, 0x6E, 0x2B, 0x99, 0x2A, 0xB6, 0x04, 0xAB, 0x7A, 0x57, 0x9D, 0x0D, 0x32, 0xF3, 0xA9, 0xA5, 0x2C, 0xDD, 0x49, 0xA7, 0xDB, 0xDB, 0x40, 0x5D, 0x27, 0x9E, 0x48, 0x44, 0x13, 0x32, 0x6F, 0x4A, 0xB9, 0x06, 0xAC, 0x40, 0x69, 0xF6, 0x59, 0xDC, 0x2C, 0x69, 0x02, 0xC5, 0x52, 0x81, 0x6C, 0xCC, 0xAB, 0x75, 0x4C, 0xD7, 0xBB, 0xA6, 0xB6, 0x0D, 0xB2, 0x3B, 0x36, 0x6A, 0x82, 0xE4, 0x9D, 0x4D, 0xD9, 0x1D, 0x85, 0xBC, 0x60, 0xC1, 0xEC, 0xDB, 0xDC, 0x59, 0x0F, 0x69, 0xC7, 0x9A, 0xB4
// or 0x00, 0x03, 0x7B, 0xC3, 0xBB, 0xEA, 0xD1, 0x20, 0x01, 0xA6, 0x9F, 0x79, 0x36, 0x3E, 0x22, 0xDB, 0xEE, 0x33, 0xA1, 0xCC, 0x5D, 0x88, 0xF5, 0x3F, 0xDC, 0xD1, 0xF4, 0x23, 0xE6, 0x0B, 0x16, 0x2C, 0xD1, 0x6F, 0x36, 0xDD, 0xFE, 0x04, 0xC0, 0x39, 0xC7, 0xBB, 0xE9, 0x6A, 0x55, 0x7D, 0x66, 0x56, 0xE7, 0x9B, 0x6C, 0x2D, 0x6E, 0x2B, 0x99, 0x2A, 0xB6, 0x04, 0xAB, 0x7A, 0x57, 0x9D, 0x0D, 0x32, 0xF3, 0xA9, 0xA5, 0x2C, 0xDD, 0x49, 0xA7, 0xDB, 0xDB, 0x40, 0x5D, 0x27, 0x9E, 0x48, 0x44, 0x13, 0x32, 0x6F, 0x4A, 0xB9, 0x06, 0xAC, 0x40, 0x69, 0xF6, 0x59, 0xDC, 0x2C, 0x69, 0x02, 0xC5, 0x52, 0x81, 0x6C, 0xCC, 0xAB, 0x75, 0x4C, 0xD7, 0xBB, 0xA6, 0xB6, 0x0D, 0xB2, 0x3B, 0x36, 0x6A, 0x82, 0xE4, 0x9D, 0x4D, 0xD9, 0x1D, 0x85, 0xBC, 0x60, 0xC1, 0xEC, 0xDB, 0xDC, 0x59, 0x0F, 0x69, 0xC7, 0x9A, 0xB4
uint8_t b12_data[] = {0xFF, 0x55, 0x84, 0x00, 0x18, 0x00, 0x03, 0x7B, 0xC3, 0xBB, 0xEA, 0xD1, 0x20, 0x01, 0xA6, 0x9F, 0x79, 0x36, 0x3E, 0x22, 0xDB, 0xEE, 0x33, 0xA1, 0xCC, 0x5D, 0x88, 0xF5, 0x3F, 0xDC, 0xD1, 0xF4, 0x23, 0xE6, 0x0B, 0x16, 0x2C, 0xD1, 0x6F, 0x36, 0xDD, 0xFE, 0x04, 0xC0, 0x39, 0xC7, 0xBB, 0xE9, 0x6A, 0x55, 0x7D, 0x66, 0x56, 0xE7, 0x9B, 0x6C, 0x2D, 0x6E, 0x2B, 0x99, 0x2A, 0xB6, 0x04, 0xAB, 0x7A, 0x57, 0x9D, 0x0D, 0x32, 0xF3, 0xA9, 0xA5, 0x2C, 0xDD, 0x49, 0xA7, 0xDB, 0xDB, 0x40, 0x5D, 0x27, 0x9E, 0x48, 0x44, 0x13, 0x32, 0x6F, 0x4A, 0xB9, 0x06, 0xAC, 0x40, 0x69, 0xF6, 0x59, 0xDC, 0x2C, 0x69, 0x02, 0xC5, 0x52, 0x81, 0x6C, 0xCC, 0xAB, 0x75, 0x4C, 0xD7, 0xBB, 0xA6, 0xB6, 0x0D, 0xB2, 0x3B, 0x36, 0x6A, 0x82, 0xE4, 0x9D, 0x4D, 0xD9, 0x1D, 0x85, 0xBC, 0x60, 0xC1, 0xEC, 0xDB, 0xDC, 0x59, 0x0F, 0x69, 0xC7, 0x9A, 0xB4, 0xDE};
uart_msg_t b12 = {1, 136, b12_data};
// #### finished device/accessory authentication process

// ### start requesting USB-OTG/device mode
// SetiPodUSBMode
uint8_t b13_data[] = {0xFF, 0x55, 0x05, 0x06, 0x83, 0x03, 0xEC, 0x02, 0x81};
uart_msg_t b13 = {1, 9, b13_data};
// #### finished requesting USB-OTG/device mode

// ### SetAvailableCurrent - notify the apple that it could draw up to 0x0834 (2100) mA from the acc
// Guess this is still send,  because the china guess have reverse engineered the VideoAdapter, which
// is directly connected to a power source via Lightning. But this does not count for your fake
// USB-OTG adapter.
uint8_t b14_data[] = {0xFF, 0x55, 0x06, 0x00, 0x54, 0x03, 0xED, 0x08, 0x34, 0x7A};
uart_msg_t b14 = {1, 10, b14_data};

// ### request WiFi information, SSID and password in cleartext
// but before we receive the SSID + pwd, the user needs to accept the prompt: ~/code/iap/assets/wifi_info_sharing_prompt.png
uint8_t wifi_data[] = {0xFF, 0x55, 0x04, 0x00, 0x69, 0x03, 0xEE, 0xA2};
uart_msg_t wifi = {1, 8, wifi_data};
// ### finished requesting WiFi information

// array of array, holding the correct order of messages to send out
uint8_t uart_b_msg_data_size = 14; // 14
uart_msg_t *uart_b_msg_data[] = {&b1, &b2, &b3, &b4, &b5, &b6, &b7, &b8, &b9, &b10, &b11, &b12, &b13, &b14};

#endif